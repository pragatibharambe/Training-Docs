#Jenkins Master Slave Configuration: 

#Launch New AWS Linux Instances

#Choose :
#Amazon Linux 2 Kernel 5.10 AMI 2.0.20230307.0 x86_64 HVM gp2

#Jenkins Master, Node1, Node2

#Launch AWS Linux Instance with port 8080 & Name Tag
#Update the Instance

#Execute only in Master:

#Jenkins Installation Steps:
#Launch AWS Linux Instance with port 8080 & Name Tag
#Update the Instance

sudo -i

yum update -y

#Install Jenkins :

sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

sudo yum upgrade

# Add required dependencies for the jenkins package
#sudo yum install java-11-openjdk

#Install epel Package:
amazon-linux-extras install epel

#Install Java: 
amazon-linux-extras install java-openjdk11

sudo yum install jenkins

#Start Jenkins:

# Start jenkins service

systemctl enable jenkins
systemctl start jenkins
systemctl status jenkins

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Execute in Slave Nodes:

#Install epel Package:
amazon-linux-extras install epel

#Install Java: 
amazon-linux-extras install java-openjdk11

#Install GIT:

yum install git -y

#Install Maven:

https://dlcdn.apache.org/maven/maven-3/3.9.1/binaries/apache-maven-3.9.1-bin.tar.gz

sudo wget https://dlcdn.apache.org/maven/maven-3/3.9.1/binaries/apache-maven-3.9.1-bin.tar.gz
sudo tar xf apache-maven-3.9.1-bin.tar.gz -C /opt
#Create a symlink for Apache maven directory to update the maven versions
sudo ln -s /opt/apache-maven-3.9.1 /opt/maven

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Set Java Path / Environment Variables:

## Check the java installed version:
#cd /usr/lib/jvm/


java-11-openjdk-11.0.18.0.10-1.amzn2.0.1.x86_64

#eg: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.amzn2.0.3.x86_64

#open .bash_profile & add the following lines:

export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-11.0.18.0.10-1.amzn2.0.1.x86_64"
export MAVEN_HOME=/opt/apache-maven-3.9.1
export M2=/opt/apache-maven-3.9.1/bin
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin:$MAVEN_HOME:$M2

source ~/.bash_profile
source ~/.bashrc

#/etc/profile 

#source ~/.bash_profile

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#********************************************************************************************
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#Add User : 

#useradd -m -d /home/devopsadmin devopsadmin

useradd devopsadmin

su - devopsadmin

ssh-keygen

ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public

#cat id_rsa & copy the private key and paste it into jenkins node config. enter private key directly field.  Then,
cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Login to Jenkins thru browser, Go to Manage Jenkins --> Config Nodes -- > Add New Node 

Config the Node Name, Label, Access thru SSH Parm - user Name, with private key

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``

Goto Global Tools config. Settings and ADD Maven Installation Details.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

yum install git 



Pipeline Script:

pipeline {
    
    agent {
        label 'slave1'
    }

    tools 
    {
        maven 'Maven-3.8.6'
    }
    
    stages {
        stage('SCM-Checkout') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'

            }
			}
        stage('Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
			}

        stage('Deploy to QA Server') {
            steps {
                // Run Maven on a Unix agent.
				script {
					sshPublisher(publishers: [sshPublisherDesc(configName: 'QA-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}
            }
			}
    }
}


****************************************************************************************************

# Configure Jenkins :

#Go to Jenkins Master thru Browser.

#Install Publish over ssh plugin

#Goto Manage Jenkins - Configure System - Configure Publish over ssh Plugin

#Create Jenkins freestyle Job to Test the Deployment as discussed

/opt/tomcat/webapps/target/mvn-hello-world.war

**************************************************************************************

QA server configuration

Launch ec2 instance

#Install epel Package:
amazon-linux-extras install epel

#Install Java: 
amazon-linux-extras install java-openjdk11

#Set Java Path / Environment Variables:
#open .bash_profile & add the following lines:

export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-11.0.18.0.10-1.amzn2.0.1.x86_64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

#save the file

source ~/.bash_profile

Install tomcat in Amazon linux instance

https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.87/bin/apache-tomcat-8.5.87.tar.gz

cd /opt

wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.87/bin/apache-tomcat-8.5.87.tar.gz

tar -xvzf /opt/apache-tomcat-8.5.87.tar.gz

mv apache-tomcat-8.5.87 tomcat



#Start tomcat server:
#goto


cd /opt/tomcat/bin
./startup.sh

**********************************************************************************

#artifact should be placed under /opt/tomcat/webapps/mvn-hello-world.war on qa server

slave1_Server 			 					QA_Server 
		
		Path :										Path :
		
			target/mvn-hello-world.war					/opt/tomcat/webapps/mvn-hello-world.war
      
      
***********************************************************************************
#Add user for tomcat

#useradd -m -d /home/devopsadmin devopsadmin

useradd devopsadmin

su - devopsadmin

ssh-keygen

ls ~/.ssh 

cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


As a devops user try to access webapps folder

cd /opt/tomcat/webapps  ->access denied as its is created by root

#change ownership of tomcat folder
#switch to root
exit

chown -R devopsadmin /opt/tomcat

*************************************

#setup a connection of tomcat and jenkins

In order to copy artifacts within server -> publish over ssh plugin

#install  publish over ssh plugin

Jenkins->manage jenkins-> manage plugin ->check in available plugin (install and restart jenkins)

Manage jenkins->configure system->add server name , hostname , username, remote directory(/opt/tomcat/webapps)

advanced->use pass authentication enter private key of QA server.

**********************************************************************************************************8    
      
#Github webhook to automatically trigger build pipeline!

#Goto Github Repository setting, 
Select webhook, 

Click Add Webhook

Enter Jenkins Master URL. eg.:
http://<public-IP>:8080/github-webhook/

http://35.154.44.76:8080/github-webhook/

Choose the push event and save the webhook configuration

**********************************************************************************

Build Periodic:
want to trigger a build for every one hour only


Intall GIT on your Jenkins Master!

	Poll SCM:
	want to trigger a build for every one hour only if there is any commit happened in the src repo 

	Github Webhook!!
	want to trigger a build for every commit happened in the src repo 

DEV envi.

	Dev1 == commit to his src code repo --->>
	to perform some unit testing 
	
	His test cycle runs every 6 hrs.
	
		- Code promotion to QA 
		
	poll SCM !
	
		Done with QA Testing src code has been updated the the required commit 
		
	GITHUB Webhook !
